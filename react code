import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from "@/components/ui/dropdown-menu";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectTrigger, SelectContent, SelectItem } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";

// Simple ProgressBar component
const ProgressBar = ({ value, max, label }) => {
  const percentage = (value / max) * 100;
  return (
    <div className="w-full bg-gray-300 rounded-full h-2.5 mt-2">
      <div
        className="bg-blue-500 h-2.5 rounded-full"
        style={{ width: ${percentage}% }}
      />
      {label && <p className="mt-1 text-xs text-center">{label}</p>}
    </div>
  );
};

const ParentDashboard = () => {
  const [selectedChild, setSelectedChild] = useState("John Doe");
  const [parentInfo, setParentInfo] = useState({ name: "Jane Doe", email: "jane.doe@email.com", club: "Custer County 4-H", photo: "", membership: "Active" });
  const [childInfo, setChildInfo] = useState({
    "John Doe": { events: ["Livestock Show", "Horse Riding"], duesPaid: true, projectsSubmitted: true, paperworkCompleted: false, pendingResults: ["Livestock Show"], projects: [{ name: "Woodworking", status: "Approved", progress: 80 }, { name: "Photography", status: "Pending", progress: 30 }], pastResults: [{ event: "Livestock Show", result: "1st Place", points: 95, judgeComments: "Excellent work!" }] },
    "Emily Doe": { events: ["Art Contest", "STEM Robotics"], duesPaid: false, projectsSubmitted: false, paperworkCompleted: true, pendingResults: ["Art Contest"], projects: [{ name: "Painting", status: "Completed", progress: 100 }], pastResults: [] },
    "Michael Doe": { events: ["Public Speaking"], duesPaid: true, projectsSubmitted: true, paperworkCompleted: true, pendingResults: [], projects: [{ name: "Speech", status: "Approved", progress: 70 }], pastResults: [{ event: "Public Speaking", result: "Honorable Mention", points: 88, judgeComments: "Good presentation!" }] }
  });
  const [editing, setEditing] = useState(false);
  const [showAlert, setShowAlert] = useState(true);  // For demo purposes, toggle this to hide the alert
  const children = Object.keys(childInfo);
  const membershipStatuses = ["Active", "Pending", "Expired"];

  const statusColors = {
    "Pending": "yellow",
    "Approved": "green",
    "Completed": "blue",
    "Closed": "red"
  };

  const handleParentChange = (field, value) => {
    setParentInfo({ ...parentInfo, [field]: value });
  };

  const handleShowAlert = () => {
    // Function to trigger pop-up alerts
    alert("Registration for 'County Fair Arts' closes in 3 days!");
  };

  return (
    <div className="p-6 max-w-2xl mx-auto">
      {showAlert && (
        <div className="bg-yellow-500 text-white text-center p-4 mb-6 rounded">
          <span>Important: Registration for 'County Fair Arts' closes in 3 days!</span>
        </div>
      )}
      
      <Card>
        <CardContent className="p-4">
          <h2 className="text-xl font-bold mb-4">Account Info</h2>
          <div className="mb-4">
            <p><strong>Name:</strong> {parentInfo.name}</p>
            <p><strong>Email:</strong> {parentInfo.email}</p>
            <p><strong>Club:</strong> {parentInfo.club}</p>
            <p><strong>Membership Status:</strong> {parentInfo.membership}</p>
          </div>
          <Button onClick={() => setEditing(!editing)}>{editing ? "Save Changes" : "Edit Profile"}</Button>
          {editing && (
            <div className="mt-4">
              <h4 className="text-md font-bold">Edit Parent Profile</h4>
              <div className="mb-2">
                <Label>Name</Label>
                <Input value={parentInfo.name} onChange={(e) => handleParentChange("name", e.target.value)} />
              </div>
              <div className="mb-2">
                <Label>Email</Label>
                <Input value={parentInfo.email} onChange={(e) => handleParentChange("email", e.target.value)} />
              </div>
              <div className="mb-2">
                <Label>Club</Label>
                <Input value={parentInfo.club} onChange={(e) => handleParentChange("club", e.target.value)} />
              </div>
              <div className="mb-2">
                <Label>Membership Status</Label>
                <Select value={parentInfo.membership} onValueChange={(value) => handleParentChange("membership", value)}>
                  <SelectTrigger>
                    <div>{parentInfo.membership}</div>
                  </SelectTrigger>
                  <SelectContent>
                    {membershipStatuses.map((status) => (
                      <SelectItem key={status} value={status}>{status}</SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
      
      <Card className="mt-6">
        <CardContent className="p-4">
          <h3 className="text-lg font-semibold mb-3">Switch Child Profile</h3>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button>{selectedChild}</Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              {children.map((child) => (
                <DropdownMenuItem key={child} onClick={() => setSelectedChild(child)}>
                  {child}
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
          <div className="mt-4">
            <h4 className="text-md font-bold">{selectedChild}'s Information</h4>
            <p><strong>Events Enrolled:</strong> {childInfo[selectedChild].events.join(", ") || "None"}</p>
            <p><strong>Pending Results:</strong> {childInfo[selectedChild].pendingResults.join(", ") || "None"}</p>
            
            <h4 className="text-md font-bold mt-4">Project List</h4>
            {childInfo[selectedChild].projects.map((project) => (
              <div key={project.name} className="mb-2">
                <p>{project.name} <Badge color={statusColors[project.status]}>{project.status}</Badge></p>
                <ProgressBar value={project.progress} max={100} label={Progress: ${project.progress}%} />
              </div>
            ))}
            
            <h4 className="text-md font-bold mt-4">Past Results</h4>
            {childInfo[selectedChild].pastResults.length > 0 ? (
              childInfo[selectedChild].pastResults.map((result) => (
                <div key={result.event}>
                  <p>{result.event}: {result.result}</p>
                  <Button onClick={() => alert(Comments: ${result.judgeComments}\nPoints: ${result.points})}>View Details</Button>
                </div>
              ))
            ) : (
              <p>No past results available.</p>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default ParentDashboard
